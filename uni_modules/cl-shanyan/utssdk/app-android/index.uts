// 引入闪验SDK相关类
import OneKeyLoginManager from 'com.chuanglan.shanyan_sdk.OneKeyLoginManager';
import { PrivacyListItem, ShanYanUIConfigure, CLResultResponse, CLResultCallBack, WidgetCallBack, WidgetItem, ResultData } from "../interface.uts";
import ShanYanUIConfig from 'com.chuanglan.shanyan_sdk.tool.ShanYanUIConfig';
import Drawable from 'android.graphics.drawable.Drawable';
import ContextCompat from 'androidx.core.content.ContextCompat';
import Color from 'android.graphics.Color';
import JSONObject from 'org.json.JSONObject';
import ConfigPrivacyBean from "com.chuanglan.shanyan_sdk.tool.ConfigPrivacyBean";
import color from 'android.R.color';
import TextView from "android.widget.TextView";
import RelativeLayout from "android.widget.RelativeLayout";
import Gravity from "android.view.Gravity";
import ShanYanCustomInterface from "com.chuanglan.shanyan_sdk.listener.ShanYanCustomInterface";
import View from "android.view.View";
import Context from 'android.content.Context';
import ImageView from "android.widget.ImageView";
import Button from "android.widget.Button";
import GradientDrawable from 'android.graphics.drawable.GradientDrawable';
import Toast from "android.widget.Toast";
export class ShanYanSDKModule {
	isDebugEnable : boolean = false;
	/**
	 * 将颜色字符串转换为颜色值
	 * @param colorParam 颜色字符串，支持格式如 "#RRGGBB"、"#AARRGGBB" 或颜色名称
	 * @returns 颜色整数值
	 */
	private toColor(colorParam ?: string) : Int {
		if (colorParam == null) {
			return 0 // 返回默认颜色值（透明）
		}
		if (this.isDebugEnable) {
			console.log(`colorParam=${colorParam}`);
		}
		return Color.parseColor(colorParam).toInt()
	}
	/**
	 * dp转px
	 * @param dp dp值
	 * @returns 转换后的px整数值
	 */
	private dp2Pix(dp : number) : Int {
		try {
			const context = UTSAndroid.getAppContext()
			const density : number = context?.getResources()?.getDisplayMetrics()?.density ?? 1.0
			return (dp * density + 0.5).toInt()
		} catch (e : any) {
			console.error("dp2Pix error:", e)
			return dp.toInt()
		}
	}

	/**
	 * 添加自定义 TextView
	 */
	private addCustomTextWidgets(widgetList : WidgetItem, builder : ShanYanUIConfig.Builder, customViewCallback ?: WidgetCallBack) : void {
		const context = UTSAndroid.getAppContext();
		let left = widgetList.leftOffsetX ?? -1;
		let top = widgetList.topOffsetY ?? -1
		let right = widgetList.rightOffsetX ?? -1
		let bottom = widgetList.bottomOffsetY ?? -1
		let width = widgetList.width ?? -1
		let height = widgetList.height ?? -1
		let textContent = widgetList.textContent
		let font = widgetList.textFont ?? 13
		let textColor = widgetList.textColor
		let backgroundColor = widgetList.backgroundColor
		let backgroundImgPath = widgetList.backgroundImgPath
		let isFinish = widgetList.isFinish ?? false;

		const customView : TextView = new TextView(context);
		customView.setText(textContent);

		if (textColor != null) {
			customView.setTextColor(this.toColor(textColor));
		}
		if (backgroundColor != null) {
			customView.setBackgroundColor(this.toColor(backgroundColor));
		}

		const backgroundDrawable = this.toDrawable(backgroundImgPath);
		if (backgroundDrawable != null) {
			customView.setBackground(backgroundDrawable);
		}

		customView.setGravity(Gravity.CENTER);

		const mLayoutParams1 = new RelativeLayout.LayoutParams(
			RelativeLayout.LayoutParams.WRAP_CONTENT,
			RelativeLayout.LayoutParams.WRAP_CONTENT
		);
		mLayoutParams1.addRule(RelativeLayout.CENTER_HORIZONTAL);
		customView.setTextSize(font.toFloat())
		if (left >= 0) {
			mLayoutParams1.leftMargin = this.dp2Pix(left);
			mLayoutParams1.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
		}

		if (top >= 0) {
			mLayoutParams1.topMargin = this.dp2Pix(top);
		}

		if (right >= 0) {
			mLayoutParams1.rightMargin = this.dp2Pix(right);
			mLayoutParams1.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
		}

		if (bottom >= 0) {
			mLayoutParams1.bottomMargin = this.dp2Pix(bottom);
			mLayoutParams1.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
		}

		if (width >= 0) {
			mLayoutParams1.width = this.dp2Pix(width);
		}

		if (height >= 0) {
			mLayoutParams1.height = this.dp2Pix(height);
		}

		customView.setLayoutParams(mLayoutParams1);
		const customInterface = (c : Context, v : View) => {
			if (customViewCallback != null) {
				customViewCallback();
			}
		}
		builder.addCustomView(customView, isFinish, false, customInterface);
	}
	/**
	 * 添加自定义 ImageView
	 */
	private addCustomImageWidgets(widgetList : WidgetItem, builder : ShanYanUIConfig.Builder, customViewCallback ?: WidgetCallBack) : void {
		const context = UTSAndroid.getAppContext();
		let left = widgetList.leftOffsetX ?? -1;
		let top = widgetList.topOffsetY ?? -1;
		let right = widgetList.rightOffsetX ?? -1;
		let bottom = widgetList.bottomOffsetY ?? -1;
		let width = widgetList.width ?? -1;
		let height = widgetList.height ?? -1;
		let backgroundColor = widgetList.backgroundColor;
		let backgroundImgPath = widgetList.backgroundImgPath;
		let isFinish = widgetList.isFinish ?? false;

		const customView : ImageView = new ImageView(context);

		if (backgroundColor != null) {
			customView.setBackgroundColor(this.toColor(backgroundColor));
		}

		const backgroundDrawable = this.toDrawable(backgroundImgPath);
		if (backgroundDrawable != null) {
			customView.setBackground(backgroundDrawable);
		}

		const mLayoutParams1 = new RelativeLayout.LayoutParams(
			RelativeLayout.LayoutParams.WRAP_CONTENT,
			RelativeLayout.LayoutParams.WRAP_CONTENT
		);
		mLayoutParams1.addRule(RelativeLayout.CENTER_HORIZONTAL);

		if (left >= 0) {
			mLayoutParams1.leftMargin = this.dp2Pix(left);
			mLayoutParams1.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
		}

		if (top >= 0) {
			mLayoutParams1.topMargin = this.dp2Pix(top);
		}

		if (right >= 0) {
			mLayoutParams1.rightMargin = this.dp2Pix(right);
			mLayoutParams1.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
		}

		if (bottom >= 0) {
			mLayoutParams1.bottomMargin = this.dp2Pix(bottom);
			mLayoutParams1.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
		}

		if (width >= 0) {
			mLayoutParams1.width = this.dp2Pix(width);
		}

		if (height >= 0) {
			mLayoutParams1.height = this.dp2Pix(height);
		}

		customView.setLayoutParams(mLayoutParams1);

		customView.setLayoutParams(mLayoutParams1);
		const customInterface = (c : Context, v : View) => {
			if (customViewCallback != null) {
				customViewCallback();
			}
		}
		builder.addCustomView(customView, isFinish, false, customInterface);
	}
	/**
	 * 添加自定义 Button
	 */
	private addCustomButtonWidgets(widgetList : WidgetItem, builder : ShanYanUIConfig.Builder, customViewCallback ?: WidgetCallBack) : void {
		const context = UTSAndroid.getAppContext();

		// 基础布局参数
		let left = widgetList.leftOffsetX ?? -1;
		let top = widgetList.topOffsetY ?? -1;
		let right = widgetList.rightOffsetX ?? -1;
		let bottom = widgetList.bottomOffsetY ?? -1;
		let width = widgetList.width ?? -1;
		let height = widgetList.height ?? -1;

		// Button特有属性
		let textContent = widgetList.textContent ?? "";
		let textColor = widgetList.textColor;
		let textSize = widgetList.textFont ?? 13;
		let backgroundColor = widgetList.backgroundColor;
		let backgroundImgPath = widgetList.backgroundImgPath;
		let isFinish = widgetList.isFinish ?? false;
		// 创建Button实例
		const customButton : Button = new Button(context);
		customButton.setText(textContent);
		//关闭字母自动大写
		customButton.setAllCaps(false);

		// 文本样式
		if (textColor != null) {
			customButton.setTextColor(this.toColor(textColor));
		}
		customButton.setTextSize(textSize.toFloat());
		// 背景处理（支持颜色和图片）
		if (backgroundColor != null) {
			customButton.setBackgroundColor(this.toColor(backgroundColor));
		}

		const backgroundDrawable = this.toDrawable(backgroundImgPath);
		if (backgroundDrawable != null) {
			customButton.setBackground(backgroundDrawable);
		}

		// 布局参数设置
		const mLayoutParams = new RelativeLayout.LayoutParams(
			width >= 0 ? this.dp2Pix(width) : RelativeLayout.LayoutParams.WRAP_CONTENT,
			height >= 0 ? this.dp2Pix(height) : RelativeLayout.LayoutParams.WRAP_CONTENT
		);

		mLayoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);

		// 边距设置
		if (left >= 0) {
			mLayoutParams.leftMargin = this.dp2Pix(left);
			mLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
		}

		if (top >= 0) {
			mLayoutParams.topMargin = this.dp2Pix(top);
		}

		if (right >= 0) {
			mLayoutParams.rightMargin = this.dp2Pix(right);
			mLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
		}

		if (bottom >= 0) {
			mLayoutParams.bottomMargin = this.dp2Pix(bottom);
			mLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
		}

		customButton.setLayoutParams(mLayoutParams);
		const customInterface = (c : Context, v : View) => {
			if (customViewCallback != null) {
				customViewCallback();
			}
		}
		builder.addCustomView(customButton, isFinish, false, customInterface);
	}
	private addCustomWidgets(customWidgetItems : Array<WidgetItem>, builder : ShanYanUIConfig.Builder) {
		if (customWidgetItems.length > 0) {
			for (const item of customWidgetItems) {
				const itemType = item.type;
				const customViewCallback = item.callback
				if (this.isDebugEnable) {
					console.log(`自定义控件类型： ${itemType} `);
				}
				if ("TextView".equals(itemType)) {
					this.addCustomTextWidgets(item, builder, customViewCallback);
				} else if ("Button".equals(itemType)) {
					this.addCustomButtonWidgets(item, builder, customViewCallback);
				} else if ("ImageView".equals(itemType)) {
					this.addCustomImageWidgets(item, builder, customViewCallback);
				}

			}
		}

	}
	/**
	 * 将图片名称转为drawable对象
	 * @param drawableName - 图片名称，不带图片格式后缀。
	 */
	private toDrawable(drawableName : string | null) : Drawable | null {
		const context = UTSAndroid.getAppContext();
		if (context == null || drawableName == null) {
			return null;
		}
		if (this.isDebugEnable) {
			console.log(`drawableName=${drawableName}`);
		}
		// 移除可能已经存在的扩展名
		let baseName = drawableName.replace(/\.[^/.]+$/, "");
		const resources = context.getResources();
		if (resources == null) {
			return null;
		}
		const packageName = context.getPackageName();
		const id = resources.getIdentifier(baseName, "drawable", packageName);
		if (id == 0) {
			return null;
		}
		return ContextCompat.getDrawable(context, id);
	}
	private getMorePrivacy(privacyItems : Array<PrivacyListItem>) : Array<ConfigPrivacyBean> {
		// 初始化返回列表
		const result : Array<ConfigPrivacyBean> = [];
		if (privacyItems.length > 0) {
			if (this.isDebugEnable) {
				console.log(`自定义隐私条款，共 ${privacyItems.length} 条`);
			}

			// 遍历输入数组
			for (const item of privacyItems) {
				const bean = new ConfigPrivacyBean(
					item.name,
					item.url
				)
				if (item.color != null) {
					bean.setColor(this.toColor(item.color));
				}
				if (item.content != null) {
					bean.setMidStr(item.content);
				}
				result.push(bean)
			}
		}
		return result
	}
	/**
	 * 设置闪验SDK内部日志开关是否开启
	 *  @param {boolean} isDebug - true:开启，false：关闭，默认false。
	 */
	setDebug(isDebug : boolean) {
		try {
			OneKeyLoginManager.getInstance().setDebug(isDebug);
			this.isDebugEnable = isDebug;
			if (isDebug) {
				console.log(`setDebug：isDebug=${isDebug}`);
			}
		} catch (e : Exception) {
			console.log(`setDebug：Exception=${e}`);
		}
	}
	/**
	 * 设置闪验SDK内部日志开关是否开启
	 *  @param {boolean} isAndroidDetailDebug - true:开启，false：关闭，默认false。
	 */
	setAndroidDetailDebug(isAndroidDetailDebug : boolean) {
		try {
			OneKeyLoginManager.getInstance().setInitDebug(isAndroidDetailDebug);
			if (isAndroidDetailDebug) {
				console.log(`setDebug：isDebug=${isAndroidDetailDebug}`);
			}
		} catch (e : Exception) {
			console.log(`setDebug：Exception=${e}`);
		}
	}
	/**
	 * 设置闪验SDK预取号超时时间
	 *  @param {number} time - 超时时间。
	 */
	setTimeOutForPreLogin(time : number) {
		try {
			OneKeyLoginManager.getInstance().setTimeOutForPreLogin(time.toInt());
		} catch (e : Exception) {
			console.log(`setTimeOutForPreLogin：Exception=${e}`);
		}
	}
	/**
	 * 主动销毁授权页
	 */
	finishAuthActivity() {
		try {
			OneKeyLoginManager.getInstance().finishAuthActivity();
		} catch (e : Exception) {
			console.log(`finishAuthActivity：Exception=${e}`);
		}
	}
	/**
	 * 清理预取号缓存
	 */
	clearScripCache() {
		try {
			OneKeyLoginManager.getInstance().clearScripCache(UTSAndroid.getAppContext());
		} catch (e : Exception) {
			console.log(`clearScripCache：Exception=${e}`);
		}
	}
	/**
	 * 由于uniappx的toast无法在原生授权页面上弹出，固增加此方法
	 */
	showShanYanNativeToast(message : string) {
		try {
			Toast.makeText(UTSAndroid.getAppContext(), message, Toast.LENGTH_SHORT).show();
		} catch (e : Exception) {
			console.log(`showShanYanNativeToast：Exception=${e}`);
		}
	}
	/**
	 * 闪验SDK初始化方法
	 * 
	 * @description 使用从闪验平台申请的APP_ID进行SDK初始化
	 * @param {string} appId - 闪验平台创建应用分配的APP_ID
	 * @param {function} callback - 初始化结果回调函数，参数为包含以下属性的对象:
	 *   @property {number} code - 初始化状态码
	 *   @property {string} result - 初始化结果描述
	 * @example
	 * initWithAppId('your_app_id', ({code, result}) => {
	 *   console.log(`初始化状态: ${code}, 结果: ${result}`);
	 * });
	 */
	initWithAppId(
		appId : string,
		callback : CLResultCallBack) {
		try {
			//Android端原生SDK初始化结果监听
			const initListener = (code : number, result : string) => {
				if (this.isDebugEnable) {
					console.log(`initListener：code=${code}result=${result}`);
				}
				let json = new JSONObject(result);
				let response : CLResultResponse = {
					code: code.toInt() == 1022 ? 1000 : code.toInt(),
					message: json.optString('message'),
					innerCode: Number.from(json.optString('innerCode')),
					innerDesc: json.optString('innerDesc'),
					data: null
				}
				callback(response);
			};
			//调用Android原生SDK初始化方法
			OneKeyLoginManager.getInstance().init(
				UTSAndroid.getAppContext(),
				appId,
				initListener
			);
		} catch (e : Exception) {
			console.log(`initWithAppId：Exception=${e}`);
		}
	}
	/**
	 * 闪验SDK预取号方法
	 * 
	 * @description 在拉起授权页前2~3秒调用预取号，可以缩短拉起授权页耗时
	 * @param {function} callback - 预取号结果回调函数，参数为包含以下属性的对象:
	 *   @property {number} code - 预取号状态码
	 *   @property {string} result - 预取号结果描述
	 * @example
	 * getPhoneInfo(({code, result}) => {
	 *   console.log(`预取号状态: ${code}, 结果: ${result}`);
	 * });
	 */
	getPhoneInfo(callback : CLResultCallBack) {
		try {
			//Android端原生SDK预取号结果监听
			const getInfoListener = (code : number, result : string) => {
				if (this.isDebugEnable) {
					console.log(`getInfoListener：code=${code}result=${result}`);
				}
				let json = new JSONObject(result);
				let resultData : ResultData = {
					telecom: json.optString('telecom'),
					protocolName: json.optString('protocolName'),
					protocolUrl: json.optString('protocolUrl'),
				}
				let response : CLResultResponse = {
					code: code.toInt() == 1022 ? 1000 : code.toInt(),
					message: json.optString('message'),
					innerCode: Number.from(json.optString('innerCode')),
					innerDesc: json.optString('innerDesc'),
					data: resultData
				}
				callback(response);
			};
			//调用Android原生SDK预取号方法
			OneKeyLoginManager.getInstance().getPhoneInfo(
				getInfoListener
			);
		} catch (e : Exception) {
			console.log(`getPhoneInfo：Exception=${e}`);
		}
	}
	/**
	 * 拉起授权页方法
	 * @param {ShanYanUIConfigure}configure - 授权页界面配置对象
	 * @param {CLResultCallBack}openLoginAuthCallback - 授权页是否启动成功回调
	 * @param {CLResultCallBack}oneKeyLoginCallback - 授权页点击事件回调
	 */
	quickAuthLoginWithConfigure(configure : ShanYanUIConfigure, openLoginAuthCallback : CLResultCallBack, oneKeyLoginCallback : CLResultCallBack) {
		try {
			let defaultTextSize : Int = 13;
			//竖屏属性
			const verticalConfig = configure.androidConfig?.verticalConfig;
			const verticalBaseConfig = verticalConfig?.baseUIConfig;
			const verticalWidgetsConfig = verticalConfig?.widgetsConfig;
			const verticalStatusBarConfig = verticalBaseConfig?.statusBarConfig;
			const verticalSystemNavBarConfig = verticalBaseConfig?.systemNavBarConfig;
			const verticalNavBarConfig = verticalBaseConfig?.navBarConfig;
			const verticalLogoConfig = verticalBaseConfig?.logoConfig;
			const verticalNumberConfig = verticalBaseConfig?.numberConfig;
			const verticalSloganConfig = verticalBaseConfig?.sloganConfig;
			const verticalLoginButtonConfig = verticalBaseConfig?.loginButtonConfig;
			const verticalPrivacyConfig = verticalBaseConfig?.privacyConfig;
			const verticalDialogThemeConfig = verticalBaseConfig?.dialogThemeConfig;
			const verticalMorePrivacy = this.getMorePrivacy(verticalPrivacyConfig?.morePrivacy ?? [])

			//横屏属性
			const horizontalConfig = configure.androidConfig?.horizontalConfig;
			const horizontalBaseConfig = horizontalConfig?.baseUIConfig;
			const horizontalWidgetsConfig = horizontalConfig?.widgetsConfig;
			const horizontalStatusBarConfig = horizontalBaseConfig?.statusBarConfig;
			const horizontalSystemNavBarConfig = horizontalBaseConfig?.systemNavBarConfig;
			const horizontalNavBarConfig = horizontalBaseConfig?.navBarConfig;
			const horizontalLogoConfig = horizontalBaseConfig?.logoConfig;
			const horizontalNumberConfig = horizontalBaseConfig?.numberConfig;
			const horizontalSloganConfig = horizontalBaseConfig?.sloganConfig;
			const horizontalLoginButtonConfig = horizontalBaseConfig?.loginButtonConfig;
			const horizontalPrivacyConfig = horizontalBaseConfig?.privacyConfig;
			const horizontalDialogThemeConfig = horizontalBaseConfig?.dialogThemeConfig;
			const horizontalMorePrivacy = this.getMorePrivacy(horizontalPrivacyConfig?.morePrivacy ?? [])

			//竖屏授权页配置
			const verticalConfigBuilder = new ShanYanUIConfig.Builder();
			verticalConfigBuilder
				//系统整体属性
				.setAuthFlagSecureEnable(verticalBaseConfig?.authFlagSecure ?? false)
				.setPrivacyFlagSecureEnable(verticalBaseConfig?.privacyFlagSecure ?? false)
				.setAuthBGImgPath(this.toDrawable(verticalBaseConfig?.authBGImgPath))
				.setAuthBgGifPath(verticalBaseConfig?.authBgGifPath)
				.setAuthBgVideoPath(verticalBaseConfig?.authBgVideoPath)
				.setFitsSystemWindows(verticalBaseConfig?.isFitsSystemWindows ?? true)
				.setTextSizeIsdp(verticalBaseConfig?.textSizeIsdp ?? false)
				.setViewPortEnabled(verticalBaseConfig?.isViewPortEnabled ?? false)

				//授权页系统状态栏（电量、信号等显示区域）属性
				.setStatusBarColor(this.toColor(verticalStatusBarConfig?.statusBarColor))
				.setPrivacyStatusBarColor(this.toColor(verticalStatusBarConfig?.privacyStatusBarColor))
				.setLightColor(verticalStatusBarConfig?.isLightColor ?? false)
				.setPrivacyLightColor(verticalStatusBarConfig?.isPrivacyLightColor ?? false)
				.setStatusBarHidden(verticalStatusBarConfig?.isStatusBarHidden ?? false)
				.setPrivacyStatusBarHidden(verticalStatusBarConfig?.isPrivacyStatusBarHidden ?? false)

				//授权页系统导航栏（底部返回按钮、标题等显示区域）属性
				.setVirtualKeyTransparent(verticalSystemNavBarConfig?.isVirtualKeyTransparent ?? false)
				.setPrivacyVirtualKeyTransparent(verticalSystemNavBarConfig?.isPrivacyVirtualKeyTransparent ?? false)
				.setFullScreen(verticalSystemNavBarConfig?.isFullScreen ?? false)
				.setPrivacyFullScreen(verticalSystemNavBarConfig?.isPrivacyFullScreen ?? false)
				.setBackPressedAvailable(verticalSystemNavBarConfig?.isBackPressedAvailable ?? false)

				//授权页导航栏属性
				.setNavColor(this.toColor(verticalNavBarConfig?.navColor))
				.setNavText(verticalNavBarConfig?.navText)
				.setNavTextColor(this.toColor(verticalNavBarConfig?.navTextColor))
				.setNavTextSize(verticalNavBarConfig?.navTextSize?.toInt() ?? defaultTextSize)
				.setNavTextBold(verticalNavBarConfig?.isNavTextBold ?? false)
				.setAuthNavTransparent(verticalNavBarConfig?.authNavTransparent ?? false)
				.setAuthNavHidden(verticalNavBarConfig?.authNavHidden ?? false)
				.setNavReturnImgHidden(verticalNavBarConfig?.navReturnImgHidden ?? false)
				.setNavReturnImgPath(this.toDrawable(verticalNavBarConfig?.navReturnImgPath))
				.setNavReturnBtnWidth(verticalNavBarConfig?.returnBtnWidth?.toInt() ?? 25)
				.setNavReturnBtnHeight(verticalNavBarConfig?.returnBtnHeight?.toInt() ?? 25)
				.setNavReturnBtnOffsetX(verticalNavBarConfig?.navReturnBtnOffsetX?.toInt() ?? 10)
				.setNavReturnBtnOffsetY(verticalNavBarConfig?.navReturnBtnOffsetY?.toInt() ?? -1)
				.setNavReturnBtnOffsetRightX(verticalNavBarConfig?.navReturnBtnOffsetRightX?.toInt() ?? -1)

				//授权页logo属性 
				.setLogoOffsetY(verticalLogoConfig?.logoOffsetY?.toInt() ?? -1)
				.setLogoOffsetBottomY(verticalLogoConfig?.logoOffsetBottomY?.toInt() ?? -1)
				.setLogoOffsetX(verticalLogoConfig?.logoOffsetX?.toInt() ?? -1)
				.setLogoWidth(verticalLogoConfig?.logoWidth?.toInt() ?? -1)
				.setLogoHeight(verticalLogoConfig?.logoHeight?.toInt() ?? -1)
				.setLogoHidden(verticalLogoConfig?.logoHidden ?? false)
				.setLogoImgPath(this.toDrawable(verticalLogoConfig?.logoImgPath))

				//授权页号码栏属性 
				.setNumFieldHeight(verticalNumberConfig?.numFieldHeight?.toInt() ?? -1)
				.setNumFieldWidth(verticalNumberConfig?.numFieldWidth?.toInt() ?? -1)
				.setNumberColor(this.toColor(verticalNumberConfig?.numberColor))
				.setNumberBold(verticalNumberConfig?.isNumberBold ?? false)
				.setNumFieldOffsetY(verticalNumberConfig?.numFieldOffsetY?.toInt() ?? 140)
				.setNumFieldOffsetBottomY(verticalNumberConfig?.numFieldOffsetBottomY?.toInt() ?? -1)
				.setNumFieldOffsetX(verticalNumberConfig?.numFieldOffsetX?.toInt() ?? -1)
				.setNumberSize(verticalNumberConfig?.numberSize?.toInt() ?? 18)

				//授权页运营商slogan栏属性
				.setSloganOffsetY(verticalSloganConfig?.sloganOffsetY?.toInt() ?? 195)
				.setSloganOffsetBottomY(verticalSloganConfig?.sloganOffsetBottomY?.toInt() ?? -1)
				.setSloganOffsetX(verticalSloganConfig?.sloganOffsetX?.toInt() ?? -1)
				.setSloganTextColor(this.toColor(verticalSloganConfig?.sloganTextColor))
				.setSloganTextBold(verticalSloganConfig?.isSloganTextBold ?? false)
				.setSloganTextSize(verticalSloganConfig?.sloganTextSize?.toInt() ?? defaultTextSize)
				.setSloganHidden(verticalSloganConfig?.sloganHidden ?? false)

				//授权页登录按钮属性
				.setLogBtnTextSize(verticalLoginButtonConfig?.logBtnTextSize?.toInt() ?? 15)
				.setLogBtnText(verticalLoginButtonConfig?.logBtnText)
				.setLogBtnTextColor(this.toColor(verticalLoginButtonConfig?.logBtnTextColor ?? "#ffffff"))
				.setLogBtnBackgroundColor(this.toColor(verticalLoginButtonConfig?.logBtnBackgroundColor ?? "#2076f6"))
				.setLogBtnImgPath(this.toDrawable(verticalLoginButtonConfig?.logBtnBackgroundPath))
				.setLogBtnWidth(verticalLoginButtonConfig?.logBtnWidth?.toInt() ?? -1)
				.setLogBtnHeight(verticalLoginButtonConfig?.logBtnHeight?.toInt() ?? -1)
				.setLogBtnTextBold(verticalLoginButtonConfig?.isLogBtnTextBold ?? false)
				.setLogBtnOffsetY(verticalLoginButtonConfig?.logBtnOffsetY?.toInt() ?? 220)
				.setLogBtnOffsetBottomY(verticalLoginButtonConfig?.logBtnOffsetBottomY?.toInt() ?? -1)
				.setLogBtnOffsetX(verticalLoginButtonConfig?.logBtnOffsetX?.toInt() ?? -1)

				//授权页协议栏属性
				.setPrivacyWidth(verticalPrivacyConfig?.privacyWidth?.toInt() ?? -1)
				.setPrivacyState(verticalPrivacyConfig?.privacyState ?? false)
				.setPrivacyTextSize(verticalPrivacyConfig?.privacyTextSize?.toInt() ?? defaultTextSize)
				.setUncheckedImgPath(this.toDrawable(verticalPrivacyConfig?.uncheckedImgPath))
				.setCheckedImgPath(this.toDrawable(verticalPrivacyConfig?.checkedImgPath))
				.setCheckBoxHidden(verticalPrivacyConfig?.checkBoxHidden ?? false)
				.setCheckBoxWH(verticalPrivacyConfig?.checkboxWidth?.toInt() ?? defaultTextSize, verticalPrivacyConfig?.checkboxHeight?.toInt() ?? defaultTextSize)
				.setCheckBoxMargin(verticalPrivacyConfig?.checkboxMarginLeft?.toInt() ?? 10, verticalPrivacyConfig?.checkboxMarginTop?.toInt() ?? 10, verticalPrivacyConfig?.checkboxMarginRigth?.toInt() ?? 10, verticalPrivacyConfig?.checkboxMarginBottom?.toInt() ?? 10)
				.setcheckBoxOffsetXY(verticalPrivacyConfig?.checkboxOffsetX?.toInt() ?? -1, verticalPrivacyConfig?.checkboxOffsetY?.toInt() ?? -1)
				.setPrivacyOffsetY(verticalPrivacyConfig?.privacyOffsetY?.toInt() ?? -1)
				.setPrivacyOffsetBottomY(verticalPrivacyConfig?.privacyOffsetBottomY?.toInt() ?? 30)
				.setPrivacyOffsetX(verticalPrivacyConfig?.privacyOffsetX?.toInt() ?? 15)
				.setPrivacyTextBold(verticalPrivacyConfig?.isPrivacyTextBold ?? false)
				.setPrivacyOffsetGravityLeft(verticalPrivacyConfig?.privacyOffsetGravityLeft ?? false)
				.setPrivacyGravityHorizontalCenter(verticalPrivacyConfig?.privacyGravityHorizontalCenter ?? false)
				.setOperatorPrivacyAtLast(verticalPrivacyConfig?.operatorPrivacyAtLast ?? false)
				.setPrivacyActivityEnabled(verticalPrivacyConfig?.privacyActivityEnabled ?? true)
				.setPrivacyNameUnderline(verticalPrivacyConfig?.privacyNameUnderline ?? false)
				.setCheckBoxTipDisable(verticalPrivacyConfig?.privacyToastHidden ?? false)
				.setAppPrivacyColor(this.toColor(verticalPrivacyConfig?.privacyBaseColor ?? "#222222"), this.toColor(verticalPrivacyConfig?.privacyNameColor ?? "#0085d0"))
				.setPrivacyTextLineSpacing((verticalPrivacyConfig?.textLineSpacingAdd ?? -1).toFloat(), (verticalPrivacyConfig?.textLineSpacingMult ?? -1).toFloat())
				.setPrivacySmhHidden(verticalPrivacyConfig?.privacySmhHidden ?? false)
				.setPrivacyCustomToastText(verticalPrivacyConfig?.toastText)
				.setPrivacyText(verticalPrivacyConfig?.privacyText?.privacyTextHead ?? "", verticalPrivacyConfig?.privacyText?.privacyTextFirst ?? "", "", "", verticalPrivacyConfig?.privacyText?.privacyTextEnd ?? "")
				.setMorePrivacy(verticalMorePrivacy)

				//授权页弹窗样式的属性
				.setDialogTheme(verticalDialogThemeConfig?.isDialogTheme ?? false, verticalDialogThemeConfig?.dialogWidth?.toInt() ?? -1, verticalDialogThemeConfig?.dialogHeight?.toInt() ?? -1, verticalDialogThemeConfig?.dialogOffsetX?.toInt() ?? -1, verticalDialogThemeConfig?.dialogOffsetY?.toInt() ?? -1, verticalDialogThemeConfig?.isDialogBottom ?? false)
				.setDialogDimAmount((verticalDialogThemeConfig?.dialogDimAmount ?? -1.0).toFloat())

			//添加自定义控件
			this.addCustomWidgets(verticalWidgetsConfig ?? [], verticalConfigBuilder);
			const verticalUiConfig = verticalConfigBuilder.build();

			//横屏授权页配置
			const horizontalConfigBuilder = new ShanYanUIConfig.Builder()
			horizontalConfigBuilder
				//系统整体属性
				.setAuthFlagSecureEnable(horizontalBaseConfig?.authFlagSecure ?? false)
				.setPrivacyFlagSecureEnable(horizontalBaseConfig?.privacyFlagSecure ?? false)
				.setAuthBGImgPath(this.toDrawable(horizontalBaseConfig?.authBGImgPath))
				.setAuthBgGifPath(horizontalBaseConfig?.authBgGifPath)
				.setAuthBgVideoPath(horizontalBaseConfig?.authBgVideoPath)
				.setFitsSystemWindows(horizontalBaseConfig?.isFitsSystemWindows ?? false)
				.setTextSizeIsdp(horizontalBaseConfig?.textSizeIsdp ?? false)
				.setViewPortEnabled(horizontalBaseConfig?.isViewPortEnabled ?? false)

				//授权页系统状态栏（电量、信号等显示区域）属性
				.setStatusBarColor(this.toColor(horizontalStatusBarConfig?.statusBarColor))
				.setPrivacyStatusBarColor(this.toColor(horizontalStatusBarConfig?.privacyStatusBarColor))
				.setLightColor(horizontalStatusBarConfig?.isLightColor ?? false)
				.setPrivacyLightColor(horizontalStatusBarConfig?.isPrivacyLightColor ?? false)
				.setStatusBarHidden(horizontalStatusBarConfig?.isStatusBarHidden ?? false)
				.setPrivacyStatusBarHidden(horizontalStatusBarConfig?.isPrivacyStatusBarHidden ?? false)

				//授权页系统导航栏（底部返回按钮、标题等显示区域）属性
				.setVirtualKeyTransparent(horizontalSystemNavBarConfig?.isVirtualKeyTransparent ?? false)
				.setPrivacyVirtualKeyTransparent(horizontalSystemNavBarConfig?.isPrivacyVirtualKeyTransparent ?? false)
				.setFullScreen(horizontalSystemNavBarConfig?.isFullScreen ?? false)
				.setPrivacyFullScreen(horizontalSystemNavBarConfig?.isPrivacyFullScreen ?? false)
				.setBackPressedAvailable(horizontalSystemNavBarConfig?.isBackPressedAvailable ?? false)

				//授权页导航栏属性
				.setNavColor(this.toColor(horizontalNavBarConfig?.navColor))
				.setNavText(horizontalNavBarConfig?.navText)
				.setNavTextColor(this.toColor(horizontalNavBarConfig?.navTextColor))
				.setNavTextSize(horizontalNavBarConfig?.navTextSize?.toInt() ?? defaultTextSize)
				.setNavTextBold(horizontalNavBarConfig?.isNavTextBold ?? false)
				.setAuthNavTransparent(horizontalNavBarConfig?.authNavTransparent ?? false)
				.setAuthNavHidden(horizontalNavBarConfig?.authNavHidden ?? false)
				.setNavReturnImgHidden(horizontalNavBarConfig?.navReturnImgHidden ?? false)
				.setNavReturnImgPath(this.toDrawable(horizontalNavBarConfig?.navReturnImgPath))
				.setNavReturnBtnWidth(horizontalNavBarConfig?.returnBtnWidth?.toInt() ?? 25)
				.setNavReturnBtnHeight(horizontalNavBarConfig?.returnBtnHeight?.toInt() ?? 25)
				.setNavReturnBtnOffsetX(horizontalNavBarConfig?.navReturnBtnOffsetX?.toInt() ?? -1)
				.setNavReturnBtnOffsetY(horizontalNavBarConfig?.navReturnBtnOffsetY?.toInt() ?? -1)
				.setNavReturnBtnOffsetRightX(horizontalNavBarConfig?.navReturnBtnOffsetRightX?.toInt() ?? -1)

				//授权页logo属性 
				.setLogoOffsetY(horizontalLogoConfig?.logoOffsetY?.toInt() ?? -1)
				.setLogoOffsetBottomY(horizontalLogoConfig?.logoOffsetBottomY?.toInt() ?? -1)
				.setLogoOffsetX(horizontalLogoConfig?.logoOffsetX?.toInt() ?? -1)
				.setLogoWidth(horizontalLogoConfig?.logoWidth?.toInt() ?? -1)
				.setLogoHeight(horizontalLogoConfig?.logoHeight?.toInt() ?? -1)
				.setLogoHidden(horizontalLogoConfig?.logoHidden ?? false)
				.setLogoImgPath(this.toDrawable(horizontalLogoConfig?.logoImgPath))

				//授权页号码栏属性 
				.setNumFieldHeight(horizontalNumberConfig?.numFieldHeight?.toInt() ?? -1)
				.setNumFieldWidth(horizontalNumberConfig?.numFieldWidth?.toInt() ?? -1)
				.setNumberColor(this.toColor(horizontalNumberConfig?.numberColor))
				.setNumberBold(horizontalNumberConfig?.isNumberBold ?? false)
				.setNumFieldOffsetY(horizontalNumberConfig?.numFieldOffsetY?.toInt() ?? 140)
				.setNumFieldOffsetBottomY(horizontalNumberConfig?.numFieldOffsetBottomY?.toInt() ?? -1)
				.setNumFieldOffsetX(horizontalNumberConfig?.numFieldOffsetX?.toInt() ?? -1)
				.setNumberSize(horizontalNumberConfig?.numberSize?.toInt() ?? 18)

				//授权页运营商slogan栏属性
				.setSloganOffsetY(horizontalSloganConfig?.sloganOffsetY?.toInt() ?? 195)
				.setSloganOffsetBottomY(horizontalSloganConfig?.sloganOffsetBottomY?.toInt() ?? -1)
				.setSloganOffsetX(horizontalSloganConfig?.sloganOffsetX?.toInt() ?? -1)
				.setSloganTextColor(this.toColor(horizontalSloganConfig?.sloganTextColor))
				.setSloganTextBold(horizontalSloganConfig?.isSloganTextBold ?? false)
				.setSloganTextSize(horizontalSloganConfig?.sloganTextSize?.toInt() ?? defaultTextSize)
				.setSloganHidden(horizontalSloganConfig?.sloganHidden ?? false)

				//授权页登录按钮属性
				.setLogBtnTextSize(horizontalLoginButtonConfig?.logBtnTextSize?.toInt() ?? 15)
				.setLogBtnText(horizontalLoginButtonConfig?.logBtnText)
				.setLogBtnTextColor(this.toColor(horizontalLoginButtonConfig?.logBtnTextColor ?? "#ffffff"))
				.setLogBtnBackgroundColor(this.toColor(horizontalLoginButtonConfig?.logBtnBackgroundColor ?? "#2076f6"))
				.setLogBtnImgPath(this.toDrawable(horizontalLoginButtonConfig?.logBtnBackgroundPath))
				.setLogBtnWidth(horizontalLoginButtonConfig?.logBtnWidth?.toInt() ?? -1)
				.setLogBtnHeight(horizontalLoginButtonConfig?.logBtnHeight?.toInt() ?? -1)
				.setLogBtnTextBold(horizontalLoginButtonConfig?.isLogBtnTextBold ?? false)
				.setLogBtnOffsetY(horizontalLoginButtonConfig?.logBtnOffsetY?.toInt() ?? 220)
				.setLogBtnOffsetBottomY(horizontalLoginButtonConfig?.logBtnOffsetBottomY?.toInt() ?? -1)
				.setLogBtnOffsetX(horizontalLoginButtonConfig?.logBtnOffsetX?.toInt() ?? -1)

				//授权页协议栏属性
				.setPrivacyWidth(horizontalPrivacyConfig?.privacyWidth?.toInt() ?? -1)
				.setPrivacyState(horizontalPrivacyConfig?.privacyState ?? false)
				.setPrivacyTextSize(horizontalPrivacyConfig?.privacyTextSize?.toInt() ?? defaultTextSize)
				.setUncheckedImgPath(this.toDrawable(horizontalPrivacyConfig?.uncheckedImgPath))
				.setCheckedImgPath(this.toDrawable(horizontalPrivacyConfig?.checkedImgPath))
				.setCheckBoxHidden(horizontalPrivacyConfig?.checkBoxHidden ?? false)
				.setCheckBoxWH(horizontalPrivacyConfig?.checkboxWidth?.toInt() ?? defaultTextSize, horizontalPrivacyConfig?.checkboxHeight?.toInt() ?? defaultTextSize)
				.setCheckBoxMargin(horizontalPrivacyConfig?.checkboxMarginLeft?.toInt() ?? 10, horizontalPrivacyConfig?.checkboxMarginTop?.toInt() ?? 10, horizontalPrivacyConfig?.checkboxMarginRigth?.toInt() ?? 10, horizontalPrivacyConfig?.checkboxMarginBottom?.toInt() ?? 10)
				.setcheckBoxOffsetXY(horizontalPrivacyConfig?.checkboxOffsetX?.toInt() ?? -1, horizontalPrivacyConfig?.checkboxOffsetY?.toInt() ?? -1)
				.setPrivacyOffsetY(horizontalPrivacyConfig?.privacyOffsetY?.toInt() ?? -1)
				.setPrivacyOffsetBottomY(horizontalPrivacyConfig?.privacyOffsetBottomY?.toInt() ?? 30)
				.setPrivacyOffsetX(horizontalPrivacyConfig?.privacyOffsetX?.toInt() ?? 15)
				.setPrivacyTextBold(horizontalPrivacyConfig?.isPrivacyTextBold ?? false)
				.setPrivacyOffsetGravityLeft(horizontalPrivacyConfig?.privacyOffsetGravityLeft ?? false)
				.setPrivacyGravityHorizontalCenter(horizontalPrivacyConfig?.privacyGravityHorizontalCenter ?? false)
				.setOperatorPrivacyAtLast(horizontalPrivacyConfig?.operatorPrivacyAtLast ?? false)
				.setPrivacyActivityEnabled(horizontalPrivacyConfig?.privacyActivityEnabled ?? false)
				.setPrivacyNameUnderline(horizontalPrivacyConfig?.privacyNameUnderline ?? false)
				.setCheckBoxTipDisable(horizontalPrivacyConfig?.privacyToastHidden ?? false)
				.setAppPrivacyColor(this.toColor(horizontalPrivacyConfig?.privacyBaseColor ?? "#222222"), this.toColor(horizontalPrivacyConfig?.privacyNameColor ?? "#0085d0"))
				.setPrivacyTextLineSpacing((horizontalPrivacyConfig?.textLineSpacingAdd ?? -1).toFloat(), (horizontalPrivacyConfig?.textLineSpacingMult ?? -1).toFloat())
				.setPrivacySmhHidden(horizontalPrivacyConfig?.privacySmhHidden ?? false)
				.setPrivacyCustomToastText(horizontalPrivacyConfig?.toastText)
				.setPrivacyText(horizontalPrivacyConfig?.privacyText?.privacyTextHead ?? "", horizontalPrivacyConfig?.privacyText?.privacyTextFirst ?? "", "", "", horizontalPrivacyConfig?.privacyText?.privacyTextEnd ?? "")
				.setMorePrivacy(horizontalMorePrivacy)

				//授权页弹窗样式的属性
				.setDialogTheme(horizontalDialogThemeConfig?.isDialogTheme ?? false, horizontalDialogThemeConfig?.dialogWidth?.toInt() ?? -1, horizontalDialogThemeConfig?.dialogHeight?.toInt() ?? -1, horizontalDialogThemeConfig?.dialogOffsetX?.toInt() ?? -1, horizontalDialogThemeConfig?.dialogOffsetY?.toInt() ?? -1, horizontalDialogThemeConfig?.isDialogBottom ?? false)
				.setDialogDimAmount((horizontalDialogThemeConfig?.dialogDimAmount ?? -1.0).toFloat())

			//添加自定义控件
			this.addCustomWidgets(horizontalWidgetsConfig ?? [], horizontalConfigBuilder);
			const horizontalUiConfig = horizontalConfigBuilder.build();
			const openLoginAuthListener = (code : number, result : string) => {
				if (this.isDebugEnable) {
					console.log(`openLoginAuthListener：code=${code}result=${result}`);
				}
				let json = new JSONObject(result);
				let response : CLResultResponse = {
					code: code,
					message: json.optString('message'),
					innerCode: Number.from(json.optString('innerCode')),
					innerDesc: json.optString('innerDesc'),
					data: null
				}
				openLoginAuthCallback(response);
			};
			const oneKeyLoginListener = (code : number, result : string) => {
				if (this.isDebugEnable) {
					console.log(`oneKeyLoginListener：code=${code}result=${result}`);
				}
				let json = new JSONObject(result);
				let resultData : ResultData = {
					token: json.optString('token'),
				}
				let response : CLResultResponse = {
					code: code,
					message: code.toInt() == 1000 ? "获取token成功" : json.optString('message'),
					innerCode: Number.from(json.optString('innerCode')),
					innerDesc: json.optString('innerDesc'),
					data: resultData
				}
				oneKeyLoginCallback(response);
			};
			OneKeyLoginManager.getInstance().setAuthThemeConfig(verticalUiConfig, horizontalUiConfig);
			OneKeyLoginManager.getInstance().openLoginAuth(true, openLoginAuthListener, oneKeyLoginListener);
		} catch (e : Exception) {
			console.log(`quickAuthLoginWithConfigure：Exception=${e}`);
		}
	}
	/**
	 * 闪验SDK本机校验获取token方法
	 * 
	 * @param {function} callback - 本机校验结果回调函数，参数为包含以下属性的对象:
	 *   @property {number} code - 本机校验状态码
	 *   @property {string} result - 本机校验结果描述
	 */
	startAuthentication(callback : CLResultCallBack) {
		try {
			//Android端原生SDK本机校验结果监听
			const authenticationListener = (code : number, result : string) => {
				if (this.isDebugEnable) {
					console.log(`authenticationListener：code=${code}result=${result}`);
				}
				let json = new JSONObject(result);
				let resultData : ResultData = {
					token: json.optString('token'),
				}
				let response : CLResultResponse = {
					code: code,
					message: code.toInt() == 2000 ? "获取token成功" : json.optString('message'),
					innerCode: Number.from(json.optString('innerCode')),
					innerDesc: json.optString('innerDesc'),
					data: resultData
				}
				callback(response);
			};
			//调用Android原生SDK预取号方法
			OneKeyLoginManager.getInstance().startAuthentication(
				authenticationListener
			);
		} catch (e : Exception) {
			console.log(`startAuthentication：Exception=${e}`);
		}
	}
}