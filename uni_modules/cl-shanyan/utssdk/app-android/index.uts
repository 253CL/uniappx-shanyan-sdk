// 引入闪验SDK相关类
import OneKeyLoginManager from 'com.chuanglan.shanyan_sdk.OneKeyLoginManager';
import { ShanYanUIConfigure } from "../interface.uts";
import ShanYanUIConfig from 'com.chuanglan.shanyan_sdk.tool.ShanYanUIConfig';
import Drawable from 'android.graphics.drawable.Drawable';
import ContextCompat from 'androidx.core.content.ContextCompat';
import Color from 'android.graphics.Color';
import { CLResultResponse, CLResultCallBack } from "../interface.uts"
import JSONObject from 'org.json.JSONObject';

/**
 * 将图片名称转为drawable对象
 * @param drawableName - 图片名称，不带图片格式后缀。
 */
function toDrawable(drawableName : string | null) : Drawable | null {
	const context = UTSAndroid.getAppContext();
	if (context == null || drawableName == null) {
		return null;
	}
	const resources = context.getResources();
	if (resources == null) {
		return null;
	}
	const packageName = context.getPackageName();
	const id = resources.getIdentifier(drawableName, "drawable", packageName);
	if (id == 0) {
		return null;
	}
	return ContextCompat.getDrawable(context, id);
}
export class ShanYanSDKModule {
	isDebugEnable : boolean = false;
	/**
	 * 设置闪验SDK内部日志开关是否开启
	 *  @param {boolean} isDebug - true:开启，false：关闭，默认false。
	 */
	setDebug(isDebug : boolean) {
		OneKeyLoginManager.getInstance().setDebug(true);
		this.isDebugEnable = isDebug;
	}
	/**
	 * 闪验SDK初始化方法
	 * 
	 * @description 使用从闪验平台申请的APP_ID进行SDK初始化
	 * @param {string} appId - 闪验平台创建应用分配的APP_ID
	 * @param {function} callback - 初始化结果回调函数，参数为包含以下属性的对象:
	 *   @property {number} code - 初始化状态码
	 *   @property {string} result - 初始化结果描述
	 * @example
	 * initWithAppId('your_app_id', ({code, result}) => {
	 *   console.log(`初始化状态: ${code}, 结果: ${result}`);
	 * });
	 */
	initWithAppId(
		appId : string,
		callback : CLResultCallBack) {
		//Android端原生SDK初始化结果监听
		const initListener = (code : number, result : string) => {
			if (this.isDebugEnable) {
				console.log(`initListener：code=${code}result=${result}`);
			}
			let json = new JSONObject(result);
			let response : CLResultResponse = {
				code: code,
				message: json.optString('message'),
				innerCode: Number.from(json.optString('innerCode')),
				innerDesc: json.optString('innerDesc'),
				data: null
			}
			callback(response);
		};
		//调用Android原生SDK初始化方法
		OneKeyLoginManager.getInstance().init(
			UTSAndroid.getAppContext(),
			appId,
			initListener
		);
	}
	/**
	 * 闪验SDK预取号方法
	 * 
	 * @description 在拉起授权页前2~3秒调用预取号，可以缩短拉起授权页耗时
	 * @param {function} callback - 预取号结果回调函数，参数为包含以下属性的对象:
	 *   @property {number} code - 预取号状态码
	 *   @property {string} result - 预取号结果描述
	 * @example
	 * getPhoneInfo(({code, result}) => {
	 *   console.log(`预取号状态: ${code}, 结果: ${result}`);
	 * });
	 */
	getPhoneInfo(callback : CLResultCallBack) {
		//Android端原生SDK预取号结果监听
		const getInfoListener = (code : number, result : string) => {
			if (this.isDebugEnable) {
				console.log(`getInfoListener：code=${code}result=${result}`);
			}
			let json = new JSONObject(result);
			let response : CLResultResponse = {
				code: code,
				message: json.optString('message'),
				innerCode: Number.from(json.optString('innerCode')),
				innerDesc: json.optString('innerDesc'),
				data: null
			}
			callback(response);
		};
		//调用Android原生SDK预取号方法
		OneKeyLoginManager.getInstance().getPhoneInfo(
			getInfoListener
		);
	}
	quickAuthLoginWithConfigure(configure : ShanYanUIConfigure, openLoginAuthCallback : CLResultCallBack, oneKeyLoginCallback : CLResultCallBack) {
		console.log('界面配置：' + configure.androidConfig?.verticalConfig?.baseUIConfig?.authBGImgPath);

		const uiConfig = new ShanYanUIConfig.Builder()
			.setAuthBGImgPath(toDrawable(configure.androidConfig?.verticalConfig?.baseUIConfig?.authBGImgPath))
			.setStatusBarColor(Color.parseColor(configure.androidConfig?.verticalConfig?.baseUIConfig?.statusBarConfig?.statusBarColor))
			.setLightColor(configure.androidConfig?.verticalConfig?.baseUIConfig?.statusBarConfig?.isLightColor)
			.setBackPressedAvailable(configure.androidConfig?.verticalConfig?.baseUIConfig?.systemNavBarConfig?.isBackPressedAvailable)
			.setNavReturnImgPath(toDrawable(configure.androidConfig?.verticalConfig?.baseUIConfig?.navBarConfig?.navReturnImgPath))
			.build();
		//const uiconfig:ShanYanUIConfig =ShanYanUIConfig.
		const openLoginAuthListener = (code : number, result : string) => {
			if (this.isDebugEnable) {
				console.log(`openLoginAuthListener：code=${code}result=${result}`);
			}
			let json = new JSONObject(result);
			let response : CLResultResponse = {
				code: code,
				message: json.optString('message'),
				innerCode: Number.from(json.optString('innerCode')),
				innerDesc: json.optString('innerDesc'),
				data: null
			}
			openLoginAuthCallback(response);
		};
		const oneKeyLoginListener = (code : number, result : string) => {
			if (this.isDebugEnable) {
				console.log(`oneKeyLoginListener：code=${code}result=${result}`);
			}
			let json = new JSONObject(result);
			let response : CLResultResponse = {
				code: code,
				message: json.optString('message'),
				innerCode: Number.from(json.optString('innerCode')),
				innerDesc: json.optString('innerDesc'),
				data: null
			}
			oneKeyLoginCallback(response);
		};
		OneKeyLoginManager.getInstance().setAuthThemeConfig(uiConfig, uiConfig);
		OneKeyLoginManager.getInstance().openLoginAuth(true, openLoginAuthListener, oneKeyLoginListener);

	}
}